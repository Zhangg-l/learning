package main

func main() {

}

/*
二、系统设计
**可靠性要求**
1.考虑到排行榜系统需要 7*24 小时运行，且需要确保数据的一致性和完整性，请说明你会如何设计系统来满足可靠性要求。
答：
在服务不挂掉的情况下：
（一）数据完整性：
	1.日志记录：记录所有请求和响应，以及错误点，用于分析系统运行情况
 	2.数据备份: 数据库的主从模式
	3.错误日志处理：记录错误数据 方便日后补偿
（二）数据一致性
	1.幂等操作：网络的不稳定性可能导致多次请求或重复请求，确保多次请求幂等
	2.缓存和库数据一致：个人常用方式是先更新库后删除缓存+重试机制（无法保证完成的数据一致）
（三）长期稳定运行：
	通过增加服务副本+负载均衡+限流 保证服务长期稳定运行
**性能要求**
考虑到排行榜系统需要实时查询和更新，且总玩家数量可达到百万级，请说明你会如何设计系统来满足性能要求。
 1.设计点： - 使用 redis + 消息队列 + 异步更新数据库（确保索引生效/分表）必要时分库分表
具体实现：
	redis 的有序集合可满足排行榜需求，排行榜的查询和更新全部通过 redis 进行。
	写请求进来后先更新 redis ，后将请求异步写入队列,脚本消费队列进行异步更新操作,必要时对热点数据进行缓存。
	查请求进来后 控制查询数量，分页查询。
	此外如果数据库压力较小，也可以增加pod来提高吞吐量

三、游戏需求更改（选做）
假如游戏设计师想让获得相同成绩的玩家享有同等的荣誉，所以计划调整为采用"密集排名"的计算方式，
请说明你会如何修改实现来满足新的游戏需求。
	答：
		个人认为 采用跳表+哈希表+链表方式可以满足需求
		跳表存储分数，跳表成员中增加用户指针，当分数相同时，挂载到当前分数节点的最后用户链表上
		同时将用户信息存储到哈希表，键为用户ID，值为用户信息
*/
